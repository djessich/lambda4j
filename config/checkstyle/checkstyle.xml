<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    <property name="fileExtensions" value="java, properties, xml"/>
    <!-- Exclude specific files -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="(module\-info\.java)|(_\.java)$"/>
    </module>
    <!-- Suppress specific checks via XML file -->
    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.suppressions.file}" default="suppressions.xml"/>
    </module>
    <!-- Maximum line length is 120 characters -->
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="120"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>
    <!-- Extra new line at end of file (EOF) -->
    <module name="NewlineAtEndOfFile"/>
    <!-- No tab character exists on a line -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
    <!-- No trailing spaces exist on a line -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
    </module>
    <!-- Empty Javadoc comments -->
    <module name="RegexpMultiline">
        <property name="id" value="EmptyJavadoc"/>
        <property name="format" value="\/\*[\s\*]*\*\/"/>
        <property name="message" value="Empty Javadoc comments must not be used."/>
    </module>
    <!-- Javadoc author tag -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*\*\s*@author"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Javadoc ''author'' tag must not be used."/>
    </module>
    <!-- Javadoc br tag -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*\*\s*.*&lt;/?br/?&gt;"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message"
                  value="Javadoc must not contain ''&lt;br&gt;'', use ''&lt;p&gt;'' on single line instead."/>
    </module>
    <!-- Javadoc code tag -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*\*\s*.*&lt;/?code/?&gt;"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message"
                  value="Javadoc must not contain ''&lt;code&gt;'', use '''{'@code ...'}''' Javadoc tag instead."/>
    </module>
    <!-- Javadoc inheritdoc tag -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*\*\s*[{]@inheritDoc[}]"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Javadoc ''inheritDoc'' tag must not be used."/>
    </module>
    <!-- Whitespace around for each loop colon operator -->
    <module name="RegexpSingleline">
        <property name="format" value="^\s*for \(.*?([^ ]:)"/>
        <property name="message" value="'':'' is not preceded by whitespace."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="^\s*for \(.*?(:[^ ])"/>
        <property name="message" value="'':'' is not followed by whitespace."/>
    </module>
    <!-- Whitespace after inline comment -->
    <module name="RegexpSingleline">
        <property name="format" value="\s//(?!@formatter)[^\s]"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Inline comment ''//'' must be followed by whitespace."/>
    </module>
    <!-- No duplicate keys in property files -->
    <module name="UniqueProperties"/>
    <module name="TreeWalker">
        <!-- Annotations -->
        <module name="AnnotationLocation">
            <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
        </module>
        <module name="AnnotationUseStyle"/>
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>
        <module name="PackageAnnotation"/>
        <!-- Blocks -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock"/>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected|ignore"/>
        </module>
        <module name="LeftCurly"/>
        <module name="NeedBraces"/>
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="option" value="same"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>
        <!-- Coding -->
        <module name="CovariantEquals"/>
        <module name="DeclarationOrder"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="FallThrough"/>
        <module name="HiddenField"/>
        <module name="IllegalInstantiation">
            <property name="classes"
                      value="java.lang.Boolean, java.lang.Byte, java.lang.Character, java.lang.Double, java.lang.Float, java.lang.Integer, java.lang.Long, java.lang.Short, java.lang.String"/>
        </module>
        <module name="IllegalType"/>
        <module name="IllegalToken"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <module name="InnerAssignment"/>
        <module name="MissingSwitchDefault"/>
        <module name="MultipleStringLiterals"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NestedForDepth"/>
        <module name="NestedIfDepth"/>
        <module name="NestedTryDepth"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="PackageDeclaration"/>
        <module name="ParameterAssignment"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="UnnecessaryParentheses"/>
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
        <module name="UnnecessarySemicolonInEnumeration"/>
        <module name="UnnecessarySemicolonInTryWithResources"/>
        <module name="VariableDeclarationUsageDistance"/>
        <!-- Design -->
        <module name="DesignForExtension"/>
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InnerTypeLast"/>
        <module name="InterfaceIsType"/>
        <module name="MutableException"/>
        <module name="OneTopLevelClass"/>
        <module name="VisibilityModifier"/>
        <module name="RegexpSinglelineJava">
            <property name="format" value="System.exit"/>
            <property name="ignoreComments" value="true"/>
            <property name="message"
                      value="Call to ''System.exit()'' must not be used"/>
        </module>
        <!-- Imports -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun"/>
            <message key="import.illegal"
                     value="Illegal import - {0}. Programs that contain direct calls to the sun.* packages are not 100% pure Java."/>
        </module>
        <module name="ImportOrder">
            <property name="option" value="bottom"/>
            <property name="groups" value="java,javax,*,org.lambda4j"/>
            <property name="ordered" value="true"/>
            <property name="separated" value="true"/>
            <property name="sortStaticImportsAlphabetically" value="true"/>
        </module>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <!-- Javadoc -->
        <module name="AtclauseOrder">
            <property name="tagOrder"
                      value="@param, @return, @throws, @author, @version, @serial, @serialData, @serialField, @see, @since, @deprecated"/>
            <property name="target"
                      value="CLASS_DEF, CTOR_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, RECORD_DEF, VARIABLE_DEF"/>
        </module>
        <module name="InvalidJavadocPosition"/>
        <module name="JavadocBlockTagLocation"/>
        <module name="JavadocContentLocationCheck"/>
        <module name="JavadocMethod">
            <property name="allowedAnnotations" value="Override, Test, Mock, Mocked"/>
            <property name="validateThrows" value="true"/>
        </module>
        <module name="JavadocMissingLeadingAsterisk"/>
        <module name="JavadocMissingWhitespaceAfterAsterisk"/>
        <module name="JavadocStyle">
            <property name="checkEmptyJavadoc" value="true"/>
        </module>
        <module name="JavadocType">
            <property name="allowUnknownTags" value="true"/>
        </module>
        <module name="JavadocVariable"/>
        <module name="MissingJavadocMethod">
            <property name="scope" value="private"/>
            <property name="allowedAnnotations" value="Override, Test, Mock, Mocked"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="checks" value="MissingJavadocMethod"/>
            <property name="files" value="src[/\\]test[/\\]java"/>
        </module>
        <module name="MissingJavadocType">
            <property name="scope" value="private"/>
            <property name="skipAnnotations" value="Generated, RunWith"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <property name="checks" value="MissingJavadocType"/>
            <property name="files" value="src[/\\]test[/\\]java"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="RequireEmptyLineBeforeBlockTagGroup"/>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                      value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )|^Created by "/>
        </module>
        <!-- Miscellaneous -->
        <module name="ArrayTypeStyle"/>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="CommentsIndentation"/>
        <module name="DescendantToken">
            <property name="tokens" value="EQUAL,NOT_EQUAL"/>
            <property name="limitedTokens" value="LITERAL_THIS,LITERAL_NULL"/>
            <property name="maximumNumber" value="1"/>
            <property name="maximumDepth" value="1"/>
            <property name="sumTokenCounts" value="true"/>
            <message key="descendant.token.sum.max" value="Reference to this can never be null."/>
        </module>
        <module name="DescendantToken">
            <property name="tokens" value="FOR_INIT"/>
            <property name="limitedTokens" value="EXPR"/>
            <property name="minimumNumber" value="1"/>
            <message key="descendant.token.min"
                     value="''for'' loop must declare an initializer. Use ''while'' loop instead."/>
        </module>
        <module name="DescendantToken">
            <property name="tokens" value="FOR_CONDITION"/>
            <property name="limitedTokens" value="EXPR"/>
            <property name="minimumNumber" value="1"/>
            <message key="descendant.token.min" value="''for'' loop must declare a condition."/>
        </module>
        <module name="DescendantToken">
            <property name="tokens" value="LITERAL_SWITCH"/>
            <property name="limitedTokens" value="LITERAL_SWITCH"/>
            <property name="maximumNumber" value="0"/>
            <property name="minimumDepth" value="1"/>
            <message key="descendant.token.max"
                     value="Found {0} nested switch statements, which must not be used."/>
        </module>
        <module name="DescendantToken">
            <property name="tokens" value="LITERAL_TRY"/>
            <property name="limitedTokens" value="LITERAL_TRY"/>
            <property name="maximumNumber" value="0"/>
            <property name="minimumDepth" value="1"/>
            <message key="descendant.token.max"
                     value="Found {0} nested try statements, which should not be used."/>
        </module>
        <module name="DescendantToken">
            <property name="tokens" value="LITERAL_CATCH,LITERAL_FINALLY"/>
            <property name="limitedTokens" value="LITERAL_TRY"/>
            <property name="maximumNumber" value="0"/>
            <message key="descendant.token.max"
                     value="Found {0} nested try statements in catch or finally, which should not be used."/>
        </module>
        <module name="DescendantToken">
            <property name="tokens" value="LITERAL_FINALLY"/>
            <property name="limitedTokens" value="LITERAL_RETURN"/>
            <property name="maximumNumber" value="0"/>
            <message key="descendant.token.max"
                     value="Return statement must not be used in finally."/>
        </module>
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="arrayInitIndent" value="4"/>
            <property name="lineWrappingIndentation" value="8"/>
        </module>
        <module name="OuterTypeFilename"/>
        <module name="TodoComment">
            <property name="severity" value="warning"/>
            <property name="format" value="(TODO)|(FIXME)|(TBR)|(TBD)"/>
        </module>
        <module name="UncommentedMain"/>
        <module name="UpperEll"/>
        <!-- Modifiers -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>
        <!-- Naming Conventions -->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="0"/>
        </module>
        <module name="AbstractClassName"/>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$"/>
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ConstantName"/>
        <module name="IllegalIdentifierName"/>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$"/>
            <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Local final variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$"/>
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="PatternVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Pattern variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="RecordComponentName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Record component name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="RecordTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$"/>
            <message key="name.invalidPattern" value="Record type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="StaticVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Static variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <!-- Size -->
        <module name="MethodLength"/>
        <module name="ParameterNumber"/>
        <module name="OuterTypeNumber"/>
        <!-- Whitespace -->
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoLineWrap"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens"
                      value="ARRAY_INIT, AT, INC, DEC, UNARY_MINUS, UNARY_PLUS, BNOT, LNOT, DOT, ARRAY_DECLARATOR, INDEX_OP, METHOD_REF"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="NoWhitespaceBeforeCaseDefaultColon"/>
        <module name="OperatorWrap">
            <property name="id" value="OperatorWrapNl"/>
            <property name="option" value="nl"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, COLON, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF, TYPE_EXTENSION_AND "/>
        </module>
        <module name="OperatorWrap">
            <property name="id" value="OperatorWrapEl"/>
            <property name="option" value="eol"/>
            <property name="tokens"
                      value="ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN, SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN"/>
        </module>
        <module name="ParenPad"/>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="eol"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapEllipsis"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="option" value="eol"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="eol"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SingleSpaceSeparator"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
    </module>
</module>
