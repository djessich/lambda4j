plugins {
    id 'java-library'
    id 'idea'

    id 'com.github.spotbugs' version '4.7.8' apply false
}

allprojects {
    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'

    apply plugin: 'com.github.spotbugs'

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${project.junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${project.junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.junitVersion}"
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        withSourcesJar()
        withJavadocJar()
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Werror' << '-Xlint:unchecked' << '-Xlint:deprecation'
        options.encoding = 'UTF-8'
    }

    javadoc {
        options.addBooleanOption('Xwerror', true)
        options.encoding = 'UTF-8'
        options.tags = ["apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:"]

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.0
                }
            }
        }
    }

    checkstyle {
        toolVersion = '9.0.1'
        configProperties = [
                "checkstyle.suppressions.file": file("${rootProject.projectDir}/config/checkstyle/suppressions.xml")
        ]
    }

    tasks.withType(Checkstyle) {
        reports {
            html.enabled = true
            xml.enabled = true
        }
    }

    pmd {
        toolVersion = '6.39.0'
        ruleSetFiles = files("${rootProject.projectDir}/config/pmd/pmd.xml")
        ruleSets = []
        consoleOutput = true
    }

    tasks.withType(Pmd) {
        reports {
            html.enabled = true
            xml.enabled = true
        }
    }

    spotbugs {
        effort = 'max'
        excludeFilter = file("${rootProject.projectDir}/config/spotbugs/exclude.xml")
    }

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            html.enabled = true
            xml.enabled = true
        }
    }

    test {
        useJUnitPlatform()

        finalizedBy jacocoTestReport
    }

    check {
        dependsOn jacocoTestCoverageVerification
    }
}
